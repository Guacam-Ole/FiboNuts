@page "/metrics/debug"
@using BalatroPoker.Services
@using System.Text.Json
@inject MetricsService MetricsService

<PageTitle>Metrics Debug - Balatro Planning Poker</PageTitle>

<div class="container mt-4">
    <h1>üîç Metrics Debug Dashboard</h1>
    <p class="text-muted">Statistics and metrics for monitoring game usage</p>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>üìä Quick Stats</h5>
                </div>
                <div class="card-body">
                    @if (summary != null)
                    {
                        <div class="row">
                            <div class="col-6 mb-2">
                                <strong>Games Created:</strong> @summary.GetValueOrDefault("games_created", 0)
                            </div>
                            <div class="col-6 mb-2">
                                <strong>Games Completed:</strong> @summary.GetValueOrDefault("games_completed", 0)
                            </div>
                            <div class="col-6 mb-2">
                                <strong>Players Joined:</strong> @summary.GetValueOrDefault("players_joined", 0)
                            </div>
                            <div class="col-6 mb-2">
                                <strong>Votes Submitted:</strong> @summary.GetValueOrDefault("votes_submitted", 0)
                            </div>
                            <div class="col-6 mb-2">
                                <strong>Rounds Played:</strong> @summary.GetValueOrDefault("rounds_played", 0)
                            </div>
                            <div class="col-6 mb-2">
                                <strong>Lowest Vote:</strong> @(summary.GetValueOrDefault("lowest_vote", null)?.ToString() ?? "N/A")
                            </div>
                            <div class="col-6 mb-2">
                                <strong>Highest Vote:</strong> @(summary.GetValueOrDefault("highest_vote", null)?.ToString() ?? "N/A")
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>üåê Language Usage</h5>
                </div>
                <div class="card-body">
                    @if (summary != null && summary.ContainsKey("language_usage"))
                    {
                        var langUsage = (Dictionary<string, object>)summary["language_usage"];
                        if (langUsage.Any())
                        {
                            @foreach (var lang in langUsage.OrderByDescending(x => Convert.ToInt64(x.Value)))
                            {
                                <div class="d-flex justify-content-between">
                                    <span>@lang.Key.ToUpper():</span>
                                    <span class="badge bg-primary">@lang.Value</span>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No language usage recorded yet</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>üÉè Most Used Cards</h5>
                </div>
                <div class="card-body">
                    @if (summary != null && summary.ContainsKey("most_used_cards"))
                    {
                        var cardUsage = (Dictionary<string, object>)summary["most_used_cards"];
                        if (cardUsage.Any())
                        {
                            @foreach (var card in cardUsage.Take(10))
                            {
                                var parts = card.Key.Split('_');
                                <div class="d-flex justify-content-between">
                                    <span>@(parts.Length == 2 ? $"{parts[1]} of {parts[0]}" : card.Key):</span>
                                    <span class="badge bg-success">@card.Value</span>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No card usage recorded yet</p>
                        }
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>üé≠ Joker Usage</h5>
                </div>
                <div class="card-body">
                    @if (summary != null && summary.ContainsKey("joker_usage"))
                    {
                        var jokerUsage = (Dictionary<string, object>)summary["joker_usage"];
                        if (jokerUsage.Any())
                        {
                            @foreach (var joker in jokerUsage.OrderByDescending(x => Convert.ToInt64(x.Value)))
                            {
                                <div class="d-flex justify-content-between">
                                    <span>@joker.Key:</span>
                                    <span class="badge bg-warning">@joker.Value</span>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No joker usage recorded yet</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>üìã Raw JSON Data</h5>
                    <div>
                        <a href="/metrics" class="btn btn-sm btn-outline-primary me-2" target="_blank">
                            üîó Prometheus Format
                        </a>
                        <button class="btn btn-sm btn-secondary" @onclick="RefreshData">
                            üîÑ Refresh
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <pre style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.375rem; font-size: 0.875rem; max-height: 400px; overflow-y: auto;">@jsonOutput</pre>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, object>? summary;
    private string jsonOutput = "";
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }
    
    private async Task RefreshData()
    {
        try
        {
            summary = MetricsService.GetMetricsSummary();
            jsonOutput = JsonSerializer.Serialize(summary, new JsonSerializerOptions 
            { 
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        }
        catch (Exception ex)
        {
            jsonOutput = $"Error loading metrics: {ex.Message}";
        }
        
        StateHasChanged();
    }
}
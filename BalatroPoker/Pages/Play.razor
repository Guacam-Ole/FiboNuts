@page "/play"
@using BalatroPoker.Models
@using BalatroPoker.Services
@using BalatroPoker.Resources
@using Microsoft.Extensions.Localization
@inject HttpGameService GameService
@inject NavigationManager Navigation
@inject LocalizationService LocalizationService
@inject IStringLocalizer<SharedResources> Localizer
@inject ILogger<Play> Logger
@implements IDisposable

<PageTitle>Play - Balatro Planning Poker</PageTitle>

@if (game == null)
{
    <div class="container mt-4">
        <div class="alert alert-danger">
            <h4>@Localizer["GameNotFound"]</h4>
            <p>@Localizer["InvalidPlayerCode"]</p>
        </div>
    </div>
}
else if (currentPlayer == null)
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h3 class="text-center mb-4">üÉè @Localizer["JoinGame"] @Localizer["AppTitle"]</h3>
                        
                        <div class="mb-3">
                            <label class="form-label">@Localizer["YourName"]</label>
                            <input type="text" class="form-control" @bind="playerName" 
                                   @onkeypress="@(async (e) => { if (e.Key == "Enter") await JoinGame(); })" />
                        </div>
                        
                        <button class="btn btn-primary w-100" @onclick="JoinGame" 
                                disabled="@string.IsNullOrWhiteSpace(playerName)">
                            @Localizer["JoinGame"] üéÆ
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <!-- Language Selector -->
        <div class="d-flex justify-content-end mb-3">
            <LanguageSelector OnLanguageChanged="OnLanguageChanged" />
        </div>
        
        <div class="row">
            <div class="col-12">
                <h1>üÉè @Localizer["AppTitle"]</h1>
                <h4 class="text-muted mb-4">@Localizer["Welcome"], @currentPlayer.Name!</h4>
                
                <!-- Player Info and Allowed Values in horizontal layout -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5>@Localizer["AllowedValues"]</h5>
                                <div class="d-flex gap-2 flex-wrap">
                                    @foreach (var value in game.AllowedValues)
                                    {
                                        <span class="badge bg-primary fs-6">@value</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5>@Localizer["Players"] (@game.Players.Count)</h5>
                                <div class="d-flex gap-2 flex-wrap">
                                    @foreach (var player in game.Players)
                                    {
                                        <span class="badge @(player.HasVoted ? "bg-success" : "bg-warning") @(player.Id == currentPlayer.Id ? "border border-primary" : "")" style="font-size: 0.9em;">
                                            @player.Name @(player.Id == currentPlayer.Id ? "(You)" : "") @(player.HasVoted ? "‚úì" : "...")
                                        </span>
                                    }
                                </div>
                                @if (game.Phase == GamePhase.Voting)
                                {
                                    <div class="mt-2">
                                        <div class="progress" style="height: 6px;">
                                            <div class="progress-bar" style="width: @((game.Players.Count > 0 ? (double)game.Players.Count(p => p.HasVoted) / game.Players.Count * 100 : 0).ToString("F0"))%"></div>
                                        </div>
                                        <small class="text-muted">@Localizer["PlayersVoted", game.Players.Count(p => p.HasVoted), game.Players.Count]</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                @if (game.Phase == GamePhase.Voting || game.Phase == GamePhase.Setup)
                {
                    <!-- Jokers Section at Top -->
                    @if (game.JokerCount > 0)
                    {
                        <div class="card mb-4">
                            <div class="card-body text-center">
                                <h5>üé≠ @Localizer["AvailableJokers"]</h5>
                                <p class="text-muted">@Localizer["JokersWillBeDrawn", game.JokerCount]</p>
                                <div class="joker-placeholder">
                                    @for (int i = 0; i < game.JokerCount; i++)
                                    {
                                        <div class="joker-slot">
                                            <svg width="80" height="110" viewBox="0 0 80 110" xmlns="http://www.w3.org/2000/svg">
                                                <rect x="2" y="2" width="76" height="106" rx="6" ry="6" 
                                                      fill="rgba(124, 58, 237, 0.2)" 
                                                      stroke="#7c3aed" 
                                                      stroke-width="2" 
                                                      stroke-dasharray="8,4" />
                                                <text x="40" y="60" font-family="Arial, sans-serif" font-size="24" 
                                                      fill="#7c3aed" text-anchor="middle">?</text>
                                            </svg>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Playing Cards Section -->
                    <div class="card">
                        <div class="card-body">
                            <h5>üé¥ @Localizer["YourHand"]</h5>
                            <p class="text-muted">@Localizer["SelectCardsToReachValue"]</p>
                            
                            
                            <div class="playing-cards-container">
                                @if (currentPlayer?.Cards != null)
                                {
                                    @foreach (var card in currentPlayer.Cards)
                                    {
                                        <PlayingCard Card="card" OnClick="@(async (selectedCard) => ToggleCard(selectedCard))" />
                                    }
                                }
                                else
                                {
                                    <p class="text-danger">No cards available</p>
                                }
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h6>@Localizer["CurrentSum"]</h6>
                                            <div class="h3 @(IsValidSum() ? "text-success" : "text-danger")">
                                                @currentPlayer.CurrentSum
                                            </div>
                                            @if (!IsValidSum() && currentPlayer.CurrentSum > 0)
                                            {
                                                <small class="text-danger">@Localizer["MustMatchAllowedValue"]</small>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 d-flex align-items-center">
                                    @if (game.Phase == GamePhase.Voting)
                                    {
                                        @if (!currentPlayer.HasVoted)
                                        {
                                            <button class="btn btn-success btn-lg w-100" 
                                                    @onclick="SubmitVote" 
                                                    disabled="@(!IsValidSum())">
                                                @Localizer["ConfirmVote"] ‚úì
                                            </button>
                                        }
                                        else
                                        {
                                            <div class="alert alert-success w-100 mb-0">
                                                <strong>@Localizer["VoteSubmitted"] ‚úì</strong>
                                                <div>@Localizer["YourVote"]: @currentPlayer.OriginalVote</div>
                                            </div>
                                        }
                                    }
                                    else if (game.Phase == GamePhase.Setup)
                                    {
                                        <div class="alert alert-info w-100 mb-0">
                                            <strong>@Localizer["WaitingForGameToStart"]</strong>
                                            <div>@Localizer["AdminWillStartVoting"]</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (game.Phase == GamePhase.Revealed)
                {
                    <!-- Revealed Jokers at Top -->
                    @if (game.ActiveJokers.Any())
                    {
                        <div class="card mb-4">
                            <div class="card-body text-center">
                                <h5>üé≠ @Localizer["RevealedJokers"]!</h5>
                                <div class="revealed-jokers">
                                    @foreach (var joker in game.ActiveJokers)
                                    {
                                        <JokerCard Joker="joker" />
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="card">
                        <div class="card-body">
                            <h5>üé≠ @Localizer["VotingResults"]</h5>
                            
                            <div class="alert alert-success">
                                <h6 class="mb-3"><strong>@Localizer["VotingEnded"]!</strong></h6>
                                
                                @foreach (var player in game.Players.Where(p => p.HasVoted))
                                {
                                    <div class="mb-2">
                                        <strong>@player.Name</strong> @Localizer["Selected"]
                                        <span class="badge @(player.Id == currentPlayer.Id ? "bg-primary" : "bg-secondary")">@player.OriginalVote</span>
                                        @if (player.Id == currentPlayer.Id) { <small class="text-muted">(@Localizer["You"])</small> }
                                    </div>
                                }
                            </div>
                            
                            <div class="alert alert-primary">
                                <h6><strong>@Localizer["FinalValues"]:</strong></h6>
                                @foreach (var player in game.Players.Where(p => p.HasVoted))
                                {
                                    <div class="mb-2 d-flex justify-content-between align-items-center @(player.Id == currentPlayer.Id ? "bg-light rounded p-2" : "")">
                                        <span><strong>@player.Name:</strong> @if (player.Id == currentPlayer.Id) { <small>(@Localizer["You"])</small> }</span>
                                        <span class="h5 mb-0">
                                            @if (player.OriginalVote != player.FinalVote)
                                            {
                                                <span class="text-decoration-line-through text-muted me-2">@player.OriginalVote</span>
                                                <span class="text-primary">‚Üí @player.FinalVote</span>
                                            }
                                            else
                                            {
                                                <span class="text-success">@player.FinalVote</span>
                                            }
                                        </span>
                                    </div>
                                }
                            </div>
                            
                            <div class="mt-4">
                                <h6>@Localizer["TeamStatistics"]:</h6>
                                <div class="row text-center">
                                    <div class="col-4">
                                        <div class="border rounded p-2">
                                            <small class="text-muted">@Localizer["Average"]</small>
                                            <div class="h5">@game.AverageVote.ToString("F1")</div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="border rounded p-2">
                                            <small class="text-muted">@Localizer["Minimum"]</small>
                                            <div class="h5">@game.MinVote</div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="border rounded p-2">
                                            <small class="text-muted">@Localizer["Maximum"]</small>
                                            <div class="h5">@game.MaxVote</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery] public string? Code { get; set; }
    
    private GameState? game;
    private Player? currentPlayer;
    private string playerName = "";
    private Timer? refreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize localization with URL parameter support
            var currentLanguage = await LocalizationService.GetCurrentLanguageAsync();
            await LocalizationService.SetLanguageWithoutReloadAsync(currentLanguage);
            
            // Subscribe to language changes
            LocalizationService.LanguageChanged += OnLanguageChangedInternal;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Localization error");
        }
        
        if (!string.IsNullOrEmpty(Code))
        {
            game = await GameService.GetGameByPlayerCodeAsync(Code);
            
        }
        
        refreshTimer = new Timer(async _ => {
            if (game != null && !string.IsNullOrEmpty(Code))
            {
                var updatedGame = await GameService.GetGameByPlayerCodeAsync(Code);
                if (updatedGame != null)
                {
                    game = updatedGame;
                    if (currentPlayer != null)
                    {
                        var updatedPlayer = game.Players.FirstOrDefault(p => p.Id == currentPlayer.Id);
                        if (updatedPlayer != null)
                        {
                            // Preserve current selection state if player hasn't voted yet
                            if (!currentPlayer.HasVoted)
                            {
                                updatedPlayer.SelectedCards = currentPlayer.SelectedCards;
                                // Update IsSelected property on cards
                                foreach (var card in updatedPlayer.Cards)
                                {
                                    card.IsSelected = currentPlayer.SelectedCards.Any(sc => 
                                        sc.Value == card.Value && sc.Suit == card.Suit);
                                }
                            }
                            currentPlayer = updatedPlayer;
                        }
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
        }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }
    
    private async Task JoinGame()
    {
        if (game == null || string.IsNullOrWhiteSpace(playerName)) return;
        
        try
        {
            currentPlayer = await GameService.JoinGameAsync(Code!, playerName.Trim());
            
            if (currentPlayer == null)
            {
                Logger.LogError("JoinGameAsync returned null for playerCode: {Code}, playerName: {PlayerName}", Code, playerName.Trim());
                return;
            }
            
            Logger.LogInformation("Player joined successfully: {PlayerId}, Cards count: {CardCount}", currentPlayer.Id, currentPlayer.Cards?.Count ?? 0);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error joining game with playerCode: {Code}, playerName: {PlayerName}", Code, playerName.Trim());
        }
    }
    
    private void ToggleCard(Card card)
    {
        if (currentPlayer?.HasVoted == true || currentPlayer?.SelectedCards == null) return;
        
        card.IsSelected = !card.IsSelected;
        
        if (card.IsSelected)
        {
            // Only add if not already present (prevent duplicates)
            if (!currentPlayer.SelectedCards.Any(c => c.Value == card.Value && c.Suit == card.Suit))
            {
                currentPlayer.SelectedCards.Add(card);
            }
        }
        else
        {
            // Remove by value/suit match instead of object reference
            currentPlayer.SelectedCards.RemoveAll(c => c.Value == card.Value && c.Suit == card.Suit);
        }
        
        // Force UI update
        StateHasChanged();
    }
    
    private bool IsValidSum()
    {
        return currentPlayer != null && 
               game != null && 
               currentPlayer.CurrentSum > 0 && 
               game.AllowedValues.Contains(currentPlayer.CurrentSum);
    }
    
    private async Task SubmitVote()
    {
        if (currentPlayer == null || game == null || !IsValidSum()) return;
        
        try
        {
            await GameService.SubmitVoteAsync(Code!, currentPlayer.Id, currentPlayer.SelectedCards.ToList());
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
        }
    }
    
    private async Task OnLanguageChanged(string languageCode)
    {
        // Set the language without page reload and refresh the UI
        await LocalizationService.SetLanguageWithoutReloadAsync(languageCode);
        StateHasChanged();
    }
    
    private void OnLanguageChangedInternal()
    {
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        LocalizationService.LanguageChanged -= OnLanguageChangedInternal;
        refreshTimer?.Dispose();
    }
}